@using EntityFrameworkWeatherApp.Models
@using EntityFrameworkWeatherApp.Mediator.WeatherAPI.CombinedWeather
@using EntityFrameworkWeatherApp.Mediator.WeatherAPI.OpenWeather
@using EntityFrameworkWeatherApp.Mediator.WeatherAPI.WeatherAPI
@using EntityFrameworkWeatherApp.Components.Shared
@using Microsoft.AspNetCore.Mvc
@using global::WeatherAPI.Models.WeatherAPI
@inject ISender sender
@inject IHttpContextAccessor HttpContextAccessor

<EditForm method="get" Model="@waLocationNameViewModel" OnValidSubmit="@WeatherAPILocationSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <ExceptionDisplayTemplate exception="@waLocationError" />
    <div class="row border grid">
        <div class="col-8">
            <div class="form-floating">
                <InputText type="text" class="form-control selectclick" id="openweatherLocation" placeholder="Location" @bind-Value="waLocationNameViewModel!.Location" />
                <label for="openweatherLocation">Location</label>
                <ValidationMessage For="() => waLocationNameViewModel.Location" />
            </div>
        </div>
        <div class="col-4 pt-2">
            <div class="form-floating">
                <button type="submit" class="btn btn-primary" id="weatherAPILocationSubmit"
                        disabled=@(SubmitDisabled || IsGettingWeatherData)>
                    @if (SubmitDisabled == true)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Loading...</span>
                    }
                    else
                    {
                        <span>Submit</span>
                    }
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback<WeatherAPICurrentModel?> ReturnData { get; set; }

    [Parameter]
    public EventCallback<bool> ReturnIsGettingWeatherData { get; set; }
    [Parameter]
    public bool IsGettingWeatherData { get; set; } = false;

    private bool SubmitDisabled { get; set; } = false;

    public void ClearForm()
    {
        waLocationError?.Clear();
    }

    private LocationNameViewModel waLocationNameViewModel = new();
    private Dictionary<string, List<ProblemDetails>>? waLocationError { get; set; } = [];

    private async Task WeatherAPILocationSubmit()
    {
        ClearForm();

        IsSubmitButtonDisabled(true);

        var resultObj = await WeatherAPIResults.GetWeatherAPIWeatherByLocationNameResult(
            waLocationNameViewModel.Location,
            sender, new()
                {
                    Context = HttpContextAccessor.HttpContext,
                    BlazorComponent = nameof(WeatherAPILocationSubmit)
                });

        if (resultObj.IsSuccess)
        {
            await ReturnData.InvokeAsync(resultObj.Value);
        }
        else
        {
            if (resultObj.Exception != null)
            {
                waLocationError = resultObj.Exception;
            }
        }

        IsSubmitButtonDisabled(false);
    }

    private void IsSubmitButtonDisabled(bool IsDisabled)
    {
        SubmitDisabled = IsDisabled;
        ReturnIsGettingWeatherData.InvokeAsync(IsDisabled);
    }
}
